name: Publish nuget artifact workflow

on:
  push:
    branches: ["master"]
    paths:
      - "src/**"

env:
  dotnet_version: 6.0.x
  node_version: 16.x
  working_dir: src/PlaywrightDemo.Tests.UI

jobs:
  paths_filter:
    runs-on: ubuntu-latest
    outputs:
      changes: ${{ steps.changes.outputs.src }}
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2.11.1
        id: changes
        with:
          filters: |
            src:
              -'src/**'

  publish_nuget_packages:
    runs-on: ubuntu-latest
    needs: paths_filter
    # run only if some files in 'src' folder was changes
    #if: "{{ needs.path_filter.outputs.change }} == 'true'"
    steps:
      - name: actions checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.node_version}}

      - name: Install Node Dependencies
        run: npm install

      - name: Get next release node-version
        id: version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          results=$(npx semantic-release --dry-run --no-ci)
          npx semantic-release --dry-run --no-ci
          if grep 'The next release version is' <<< $result
          then
            echo "Running senantic-release in dry run mode to extract next semantic version number";
            echo "NEXT_VERSION=$(echo "$result" | grep 'The next release version is' | sed -E 's/.* ([[:digit:].]+)/\1/')" >> $GITHUB_ENV
          else
            echo "There are no relevant changes, skipping release";
            echo "::set-ouput name=changesDetectedSinceLastRelease::false"
          fi

      - name: Setup .NET
        if: steps.version.outputs.changesDetectedSinceLastRelease == false
        uses: actions/setup-dotnet@v1
        with:
          dotnet_version: ${{ env.dotnet_version }}

      - name: Install Dependencies
        run: dotnet restore
        working-directory: src

      - name: Build
        if: steps.version.outputs.changesDetectedSinceLastRelease == false
        run: dotnet build --configuration Release
        working-directory: src

      - name: Publish
        if: steps.version.outputs.changesDetectedSinceLastRelease == false
        run: dotnet publish --configuration Release
        working-directory: src

      - name: Upload Artifact
        if: steps.version.outputs.changesDetectedSinceLastRelease == false
        uses: actions/upload-artifact@v2
        with:
          name: TestProject.${{ env.NEXT_VERSION }}
          path: ${{ env.working_dir }}//bin/Release/net6.0/pubish

      - name: Fetch Release Version
        if: steps.version.outputs.changesDetectedSinceLastRelease == false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release
